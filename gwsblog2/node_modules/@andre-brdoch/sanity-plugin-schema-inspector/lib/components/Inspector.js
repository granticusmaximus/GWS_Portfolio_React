"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactJsonInspector = _interopRequireDefault(require("react-json-inspector"));

var _InspectDialog = require("@sanity/desk-tool/lib/panes/document/inspectDialog/InspectDialog.styles");

var _md = require("react-icons/md");

var _ui = require("@sanity/ui");

var _TypeLink = _interopRequireDefault(require("./TypeLink"));

var _data = require("../data");

var _styles = _interopRequireDefault(require("./styles.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Inspector = function Inspector(props) {
  var type = props.type;
  var typeClean = (0, _data.removeHiddenKeysFromType)(type);
  var toast = (0, _ui.useToast)();

  var copy = function copy(text) {
    navigator.clipboard.writeText(text).then(function () {
      toast.push({
        title: "Copied \"".concat(text, "\" to clipboard")
      });
    });
  };

  var CopyInteractiveLabel = function CopyInteractiveLabel(props) {
    var value = props.value;
    return /*#__PURE__*/React.createElement("span", {
      onClick: function onClick() {
        return copy(value);
      },
      className: "".concat(_styles["default"].copyLabel, " ").concat(_styles["default"].interactiveLabel)
    }, value, /*#__PURE__*/React.createElement(_md.MdContentCopy, {
      className: _styles["default"].labelIcon
    }));
  };

  var LinkInteractiveLabel = function LinkInteractiveLabel(props) {
    var value = props.value;
    var isExternalLink = (0, _data.isCoreType)(value);
    return /*#__PURE__*/React.createElement(_TypeLink["default"], {
      typeName: value,
      isExternalLink: isExternalLink,
      className: "".concat(_styles["default"].labelLink, " ").concat(_styles["default"].interactiveLabel)
    }, value, isExternalLink && /*#__PURE__*/React.createElement(_md.MdOpenInNew, {
      className: _styles["default"].labelIcon
    }));
  };

  var interactiveLabel = function interactiveLabel(props) {
    var keypath = props.keypath,
        value = props.value,
        isKey = props.isKey;
    var pathParts = keypath.split('.');
    var lastPart = pathParts[pathParts.length - 1];
    var isLink = lastPart === 'type' && !isKey && value && (0, _data.typeExists)(value);
    var canBeCopied = lastPart === 'name' && !isKey && value;
    if (isLink) return /*#__PURE__*/React.createElement(LinkInteractiveLabel, {
      value: value
    });
    if (canBeCopied) return /*#__PURE__*/React.createElement(CopyInteractiveLabel, {
      value: value
    });
    return '';
  };

  var SearchBar = function SearchBar(props) {
    var _onChange = props.onChange;
    return /*#__PURE__*/React.createElement("div", {
      className: _styles["default"].searchBar
    }, /*#__PURE__*/React.createElement(_ui.TextInput, {
      onChange: function onChange(e) {
        _onChange(e.target.value);
      }
    }));
  };

  return typeClean && /*#__PURE__*/React.createElement(_InspectDialog.JSONInspectorWrapper, null, /*#__PURE__*/React.createElement("div", {
    className: _styles["default"].inspectorContainer
  }, /*#__PURE__*/React.createElement(_reactJsonInspector["default"], {
    data: typeClean,
    isExpanded: function isExpanded() {
      return true;
    },
    interactiveLabel: interactiveLabel,
    search: SearchBar
  })));
};

var _default = Inspector;
exports["default"] = _default;