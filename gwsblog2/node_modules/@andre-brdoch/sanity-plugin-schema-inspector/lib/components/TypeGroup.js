"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var React = _interopRequireWildcard(require("react"));

var _components = require("@sanity/base/components");

var _ui = require("@sanity/ui");

var _TypeLink = _interopRequireDefault(require("./TypeLink"));

var _styles = _interopRequireDefault(require("./styles.css"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var TypeGroup = function TypeGroup(props) {
  var types = props.types,
      groupType = props.groupType,
      title = props.title;
  return (types === null || types === void 0 ? void 0 : types.length) > 0 && /*#__PURE__*/React.createElement(_ui.Stack, {
    space: 3
  }, /*#__PURE__*/React.createElement("header", null, /*#__PURE__*/React.createElement(_ui.Heading, {
    as: "h3",
    size: 1
  }, title)), /*#__PURE__*/React.createElement("ul", {
    className: _styles["default"].list
  }, types.map(function (t) {
    return /*#__PURE__*/React.createElement("li", {
      key: t.name
    }, /*#__PURE__*/React.createElement(_TypeLink["default"], {
      typeName: t.name,
      isExternalLink: groupType === 'coreTypes',
      className: _styles["default"].link
    }, /*#__PURE__*/React.createElement(_components.DefaultPreview, {
      title: t.name,
      subtitle: t.title,
      media: t.icon
    })));
  })));
};

var _default = TypeGroup;
exports["default"] = _default;