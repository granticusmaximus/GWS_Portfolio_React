'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var PatchEvent = require('@sanity/form-builder/PatchEvent');
var PatchEvent__default = _interopDefault(PatchEvent);
var pluginConfig = _interopDefault(require('config:bynder-input'));
var ButtonGrid = _interopDefault(require('part:@sanity/components/buttons/button-grid'));
var Button = _interopDefault(require('part:@sanity/components/buttons/default'));
var Fieldset = _interopDefault(require('part:@sanity/components/fieldsets/default'));
var videojs = _interopDefault(require('video.js'));
var diff = require('@sanity/field/diff');

var url = 'https://d8ejoa1fys2rk.cloudfront.net/5.0.5/modules/compactview/bynder-compactview-2-latest.js';
function loadBynder(callback) {
  var existingScript = document.getElementById('bynder');

  if (!existingScript) {
    var script = document.createElement('script');
    script.src = url;
    script.id = 'bynder';
    document.body.appendChild(script);

    script.onload = function () {
      if (callback) {
        return callback();
      }

      return true;
    };
  }

  if (existingScript && callback) {
    return callback();
  }

  return true;
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;

  _setPrototypeOf(subClass, superClass);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

var VideoPlayer = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(VideoPlayer, _React$Component);

  function VideoPlayer() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = VideoPlayer.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this.player = videojs(this.videoNode, this.props);
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.player) {
      this.player.dispose();
    }
  };

  _proto.render = function render() {
    var _this = this;

    return React.createElement("div", null, React.createElement("link", {
      href: "https://vjs.zencdn.net/7.8.4/video-js.css",
      rel: "stylesheet"
    }), React.createElement("div", {
      "data-vjs-player": true,
      style: {
        marginBottom: '16px'
      }
    }, React.createElement("video", {
      className: "video-js vjs-16-9 vjs-big-play-centered",
      ref: function ref(node) {
        if (node) {
          _this.videoNode = node;
        }
      }
    })));
  };

  return VideoPlayer;
}(React.Component);

var BynderInput = function BynderInput(props) {
  var removeValue = function removeValue() {
    var onChange = props.onChange;
    onChange(PatchEvent__default.from([PatchEvent.unset()]));
  };

  var getPreviewUrl = function getPreviewUrl(asset) {
    switch (asset.type) {
      case 'VIDEO':
        return asset.previewUrls[0];

      default:
        return asset.files.webImage.url;
    }
  };

  var getVideoUrl = function getVideoUrl(asset) {
    if (asset.type === 'VIDEO') {
      var _asset$files$original, _asset$files, _asset$files$original2;

      // if original asset is available (public videos only) use that if not fall back to the preview url
      return (_asset$files$original = (_asset$files = asset.files) == null ? void 0 : (_asset$files$original2 = _asset$files.original) == null ? void 0 : _asset$files$original2.url) != null ? _asset$files$original : asset.previewUrls[0];
    }

    return null;
  };

  var getAspectRatio = function getAspectRatio(dimensions) {
    return dimensions.height / dimensions.width;
  };

  var openMediaSelector = function openMediaSelector() {
    var onChange = props.onChange,
        type = props.type,
        value = props.value;

    var onSuccess = function onSuccess(assets) {
      var _asset$files$transfor;

      var asset = assets[0];
      var webImage = asset.files.webImage;
      var aspectRatio = getAspectRatio({
        width: webImage.width,
        height: webImage.height
      });
      onChange(PatchEvent__default.from([PatchEvent.set({
        _key: value == null ? void 0 : value._key,
        _type: type.name,
        id: asset.id,
        name: asset.name,
        databaseId: asset.databaseId,
        type: asset.type,
        previewUrl: getPreviewUrl(asset),
        previewImg: webImage.url,
        datUrl: (_asset$files$transfor = asset.files.transformBaseUrl) == null ? void 0 : _asset$files$transfor.url,
        videoUrl: getVideoUrl(asset),
        description: asset.description,
        aspectRatio: aspectRatio
      })]));
    };

    var options = {
      language: pluginConfig.language || 'en_US',
      defaultDomain: pluginConfig.portalDomain,
      theme: {
        colorPrimary: '#156dff',
        colorButtonPrimary: '#156dff'
      },
      mode: 'SingleSelectFile',
      onSuccess: onSuccess
    };
    var assetTypes = type.options.assetTypes;

    if (assetTypes) {
      options.assetTypes = assetTypes;
    }

    loadBynder(function () {
      window.BynderCompactView.open(options);
    });
  };

  var value = props.value,
      type = props.type,
      markers = props.markers,
      level = props.level,
      readOnly = props.readOnly;
  var preview;

  if (value) {
    if (value.type === 'VIDEO') {
      preview = React.createElement(VideoPlayer, {
        controls: true,
        poster: value.previewImg,
        sources: [{
          src: value.previewUrl
        }]
      });
    }

    if (value.type === 'IMAGE') {
      preview = React.createElement("img", {
        alt: "preview",
        src: value.previewUrl,
        style: {
          maxWidth: '100%',
          height: 'auto'
        }
      }); // TODO: Add preview for document / audio types and empty state
    }
  }

  return React.createElement(Fieldset, {
    markers: markers,
    //presence={presence.filter(item => item.path[0] === '$' || isInside.includes(item.identity))}
    legend: type.title,
    description: type.description,
    level: level
  }, React.createElement("div", {
    style: {
      textAlign: 'center'
    }
  }, preview), React.createElement(ButtonGrid, {
    align: "start"
  }, React.createElement(Button, {
    disabled: readOnly,
    inverted: true,
    title: "Select an asset",
    kind: "default",
    onClick: openMediaSelector
  }, "Browse"), React.createElement(Button, {
    disabled: readOnly || !value,
    color: "danger",
    inverted: true,
    title: "Remove asset",
    onClick: removeValue
  }, "Remove")));
};

function Component(_ref) {
  var value = _ref.value;

  if (value && value.previewUrl) {
    return React.createElement("div", null, React.createElement("img", {
      alt: "preview",
      src: value.previewUrl,
      style: {
        width: '100%'
      }
    }));
  }

  return React.createElement("div", {
    className: undefined.noImage
  }, React.createElement("div", null, "(no image)"));
}

var BynderDiff = function BynderDiff(_ref2) {
  var diff$1 = _ref2.diff,
      schemaType = _ref2.schemaType;
  return React.createElement(diff.DiffFromTo, {
    diff: diff$1,
    schemaType: schemaType,
    previewComponent: Component
  });
};

var schema = {
  name: 'bynder.asset',
  type: 'object',
  title: 'Bynder Asset',
  fields: [{
    type: 'string',
    name: 'id'
  }, {
    type: 'string',
    name: 'name'
  }, {
    type: 'string',
    name: 'databaseId'
  }, {
    type: 'string',
    name: 'type'
  }, {
    type: 'string',
    name: 'previewUrl'
  }, {
    type: 'string',
    name: 'previewImg'
  }, {
    type: 'string',
    name: 'datUrl'
  }, {
    type: 'string',
    name: 'description'
  }, {
    type: 'number',
    name: 'aspectRatio'
  }, {
    type: 'string',
    name: 'videoUrl'
  }],
  inputComponent: BynderInput,
  diffComponent: BynderDiff
};

exports.default = schema;
//# sourceMappingURL=sanity-plugin-bynder-input.cjs.development.js.map
