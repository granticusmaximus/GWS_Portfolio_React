{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction updateURL(page) {\n  if (window.history.pushState) {\n    var newurl = window.location.protocol + \"//\" + window.location.host + window.location.pathname + (\"?page=\" + page);\n    window.history.pushState({\n      path: newurl\n    }, \"\", newurl);\n  }\n}\n\nvar PaginatePrev = function PaginatePrev(props) {\n  return React.createElement(React.Fragment, null, props.prevButton === true ? React.createElement(\"li\", null, React.createElement(\"button\", {\n    className: \"paginateButton paginationPrev\",\n    disabled: props.currentPage === 1 ? \"disabled\" : \"\",\n    onClick: function onClick() {\n      return props.changePage(props.currentPage - 1);\n    }\n  }, props.prevButtonLabel ? props.prevButtonLabel : \"<\")) : \"\");\n};\n\nvar PaginateNext = function PaginateNext(props) {\n  return React.createElement(React.Fragment, null, props.nextButton === true ? React.createElement(\"li\", null, React.createElement(\"button\", {\n    className: \"paginateButton paginationNext\",\n    disabled: props.currentPage === props.pages ? \"disabled\" : \"\",\n    onClick: function onClick() {\n      return props.changePage(props.currentPage + 1);\n    }\n  }, props.nextButtonLabel ? props.nextButtonLabel : \">\")) : \"\");\n};\n\nvar PaginateFiveForward = function PaginateFiveForward(props) {\n  return React.createElement(React.Fragment, null, props.jumpFiveForwardButton === true ? React.createElement(\"li\", null, React.createElement(\"button\", {\n    className: \"paginateButton paginationFiveForwrard\",\n    disabled: props.currentPage > props.pages - 5 ? \"disabled\" : \"\",\n    onClick: function onClick() {\n      return props.changePage(props.currentPage === 1 ? props.currentPage + 4 : props.currentPage + 5);\n    }\n  }, props.jumpFiveForwardButtonLabel ? props.jumpFiveForwardButtonLabel : \">>\")) : \"\");\n};\n\nvar PaginateTenForward = function PaginateTenForward(props) {\n  return React.createElement(React.Fragment, null, props.jumpTenForwardButton === true ? React.createElement(\"li\", null, React.createElement(\"button\", {\n    className: \"paginateButton paginationTenForward\",\n    disabled: props.currentPage > props.pages - 10 ? \"disabled\" : \"\",\n    onClick: function onClick() {\n      return props.changePage(props.currentPage === 1 ? props.currentPage + 9 : props.currentPage + 10);\n    }\n  }, props.jumpTenForwardButtonLabel ? props.jumpTenForwardButtonLabel : \">>>\")) : \"\");\n};\n\nvar PaginateFiveBackward = function PaginateFiveBackward(props) {\n  return React.createElement(React.Fragment, null, props.jumpFiveBackwardButton === true ? React.createElement(\"li\", null, React.createElement(\"button\", {\n    className: \"paginateButton paginationFiveBackward\",\n    disabled: props.currentPage < 5 ? \"disabled\" : \"\",\n    onClick: function onClick() {\n      return props.changePage(props.currentPage === 5 ? props.currentPage - 4 : props.currentPage - 5);\n    }\n  }, props.jumpFiveBackwardButtonLabel ? props.jumpFiveBackwardButtonLabel : \"<<\")) : \"\");\n};\n\nvar PaginateTenBackward = function PaginateTenBackward(props) {\n  return React.createElement(React.Fragment, null, props.jumpTenBackwardButton === true ? React.createElement(\"li\", null, React.createElement(\"button\", {\n    className: \"paginateButton paginationTenBackward\",\n    disabled: props.currentPage < 10 ? \"disabled\" : \"\",\n    onClick: function onClick() {\n      return props.changePage(props.currentPage === 10 ? props.currentPage - 9 : props.currentPage - 10);\n    }\n  }, props.jumpTenBackwardButtonLabel ? props.jumpTenBackwardButtonLabel : \"<<<\")) : \"\");\n};\n\nvar PaginateEnd = function PaginateEnd(props) {\n  return React.createElement(React.Fragment, null, props.jumpEndButton === true ? React.createElement(\"li\", null, React.createElement(\"button\", {\n    className: \"paginateButton paginationEnd\",\n    disabled: props.currentPage === props.pages ? \"disabled\" : \"\",\n    onClick: function onClick() {\n      return props.changePage(props.pages);\n    }\n  }, props.jumpEndButtonLabel ? props.jumpEndButtonLabel : \"End\")) : \"\");\n};\n\nvar PaginateStart = function PaginateStart(props) {\n  return React.createElement(React.Fragment, null, props.jumpStartButton === true ? React.createElement(\"li\", null, React.createElement(\"button\", {\n    className: \"paginateButton paginationStart\",\n    disabled: props.currentPage === 1 ? \"disabled\" : \"\",\n    onClick: function onClick() {\n      return props.changePage(1);\n    }\n  }, props.jumpStartButtonLabel ? props.jumpStartButtonLabel : \"Start\")) : \"\");\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction Pagination(props) {\n  // Called carbon copy because I never want this to change\n  var carbonCopy = props.items; // Used to reRender component\n\n  var _useState = useState(\"\"),\n      _useState2 = slicedToArray(_useState, 2),\n      render = _useState2[0],\n      setRender = _useState2[1];\n\n  var _useState3 = useState(1),\n      _useState4 = slicedToArray(_useState3, 2),\n      currentPage = _useState4[0],\n      setCurrentPage = _useState4[1];\n\n  var postsPerPage = props.postsPerPage;\n\n  var _useState5 = useState(\"0...\" + postsPerPage),\n      _useState6 = slicedToArray(_useState5, 2),\n      range = _useState6[0],\n      setRange = _useState6[1];\n\n  var buttons = [];\n  var postsLength = props.items.length;\n  var pages = Math.ceil(postsLength / postsPerPage); // Set page if parameter is there\n\n  useEffect(function () {\n    if (carbonCopy.length === 0) {\n      setRender(\"render_\" + Math.random());\n    }\n\n    if (carbonCopy.length > 0) {\n      var url = window.location.href;\n\n      if (url.indexOf(\"?page=\") !== -1) {\n        var param = url.substring(url.indexOf(\"?page=\"));\n        var page = Number(param.replace(\"?page=\", \"\")); // Update Content\n\n        changePage(page);\n      } else {\n        changePage(1);\n      }\n    }\n  }, [render]); // Paginate Function to determine query range\n\n  var PaginateButton = function PaginateButton(props) {\n    var page = props.page;\n\n    if (props.paginationStyle === \"activePage\") {\n      return React.createElement(React.Fragment, null, React.createElement(React.Fragment, null, page === currentPage ? React.createElement(\"li\", null, React.createElement(\"button\", {\n        className: page === currentPage ? \"active\" : \"\",\n        onClick: function onClick() {\n          return changePage(page, range);\n        }\n      }, page)) : \"\"));\n    } else if (props.paginationStyle === \"centerMode\") {\n      return React.createElement(React.Fragment, null, page === currentPage || page === currentPage - 1 || page === currentPage + 1 ? React.createElement(\"li\", null, React.createElement(\"button\", {\n        className: page === currentPage ? \"active\" : \"\",\n        onClick: function onClick() {\n          return changePage(page, range);\n        }\n      }, page)) : \"\");\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(\"li\", null, React.createElement(\"button\", {\n        className: page === currentPage ? \"active\" : \"\",\n        onClick: function onClick() {\n          return changePage(page, range);\n        }\n      }, page)));\n    }\n  };\n\n  var changePage = function changePage(page, range) {\n    // Calculating Range\n    var firstNumber = postsPerPage * (page - 1);\n    var secondNumber = firstNumber + postsPerPage;\n    var newRange = firstNumber + \"...\" + secondNumber; // Returning part of object that we need\n\n    var itemsToReturn = [];\n    carbonCopy.forEach(function (item, index) {\n      if (index >= firstNumber && index <= secondNumber - 1) {\n        itemsToReturn.push(item);\n      }\n    });\n    setCurrentPage(page);\n    setRange(newRange);\n\n    if (page !== currentPage) {\n      updateURL(page); // console.log(page, newRange, itemsToReturn);\n\n      props.action(page, newRange, itemsToReturn);\n    } else {\n      // console.log(page, newRange, itemsToReturn);\n      props.action(1, newRange, itemsToReturn); // Returning nothing because already on page 🕵️‍!\n    }\n  }; // Assign Buttons\n\n\n  for (var i = 0; i < pages; i++) {\n    buttons.push(React.createElement(React.Fragment, {\n      key: i + 1\n    }, React.createElement(PaginateButton, {\n      page: i + 1,\n      action: props.action,\n      paginationStyle: props.paginationStyle\n    })));\n  } // Return Pagination\n\n\n  return React.createElement(React.Fragment, null, postsLength > 1 ? React.createElement(\"ul\", {\n    className: ['pagePagination', props.className].join(' ')\n  }, React.createElement(PaginateStart, {\n    jumpStartButton: props.jumpStartButton,\n    jumpStartButtonLabel: props.jumpStartButtonLabel,\n    currentPage: currentPage,\n    changePage: changePage,\n    pages: pages\n  }), React.createElement(PaginateTenBackward, {\n    jumpTenBackwardButton: props.jumpTenBackwardButton,\n    jumpTenBackwardButtonLabel: props.jumpTenBackwardButtonLabel,\n    currentPage: currentPage,\n    changePage: changePage,\n    pages: pages\n  }), React.createElement(PaginateFiveBackward, {\n    jumpFiveBackwardButton: props.jumpFiveBackwardButton,\n    jumpFiveBackwardButtonLabel: props.jumpFiveBackwardButtonLabel,\n    currentPage: currentPage,\n    changePage: changePage,\n    pages: pages\n  }), React.createElement(PaginatePrev, {\n    prevButton: props.prevButton,\n    currentPage: currentPage,\n    changePage: changePage,\n    prevButtonLabel: props.prevButtonLabel\n  }), buttons, React.createElement(PaginateNext, {\n    nextButton: props.nextButton,\n    currentPage: currentPage,\n    changePage: changePage,\n    pages: pages,\n    nextButtonLabel: props.nextButtonLabel\n  }), React.createElement(PaginateFiveForward, {\n    jumpFiveForwardButton: props.jumpFiveForwardButton,\n    jumpFiveForwardButtonLabel: props.jumpFiveForwardButtonLabel,\n    currentPage: currentPage,\n    changePage: changePage,\n    pages: pages\n  }), React.createElement(PaginateTenForward, {\n    jumpTenForwardButton: props.jumpTenForwardButton,\n    jumpTenForwardButtonLabel: props.jumpTenForwardButtonLabel,\n    currentPage: currentPage,\n    changePage: changePage,\n    pages: pages\n  }), React.createElement(PaginateEnd, {\n    jumpEndButton: props.jumpEndButton,\n    jumpEndButtonLabel: props.jumpEndButtonLabel,\n    currentPage: currentPage,\n    changePage: changePage,\n    pages: pages\n  })) : \"\");\n}\n\nPagination.propTypes = {\n  paginationStyle: PropTypes.string,\n  action: PropTypes.func,\n  postsPerPage: PropTypes.number,\n  postsLength: PropTypes.number,\n  nextButton: PropTypes.bool,\n  nextButtonLabel: PropTypes.string,\n  prevButton: PropTypes.bool,\n  prevButtonLabel: PropTypes.string,\n  jumpStartButton: PropTypes.bool,\n  jumpStartButtonLabel: PropTypes.string,\n  jumpFiveForwardButton: PropTypes.bool,\n  jumpFiveForwardButtonLabel: PropTypes.string,\n  jumpTenForwardButton: PropTypes.bool,\n  jumpTenForwardButtonLabel: PropTypes.string,\n  jumpFiveBackwardButton: PropTypes.bool,\n  jumpFiveBackwardButtonLabel: PropTypes.string,\n  jumpTenBackwardButton: PropTypes.bool,\n  jumpTenBackwardButtonLabel: PropTypes.string,\n  jumpEndButton: PropTypes.bool,\n  jumpEndButtonLabel: PropTypes.string,\n  className: PropTypes.string\n};\nexport default Pagination;","map":{"version":3,"mappings":"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","names":["updateURL","page","window","history","pushState","newurl","location","protocol","host","pathname","path","PaginatePrev","React","Fragment","prevButton","props","currentPage","changePage","prevButtonLabel","PaginateNext","nextButton","pages","nextButtonLabel","PaginateFiveForward","jumpFiveForwardButton","jumpFiveForwardButtonLabel","PaginateTenForward","jumpTenForwardButton","jumpTenForwardButtonLabel","PaginateFiveBackward","jumpFiveBackwardButton","jumpFiveBackwardButtonLabel","PaginateTenBackward","jumpTenBackwardButton","jumpTenBackwardButtonLabel","PaginateEnd","jumpEndButton","jumpEndButtonLabel","PaginateStart","jumpStartButton","jumpStartButtonLabel","Pagination","carbonCopy","items","useState","render","setRender","setCurrentPage","postsPerPage","range","setRange","buttons","postsLength","length","Math","ceil","random","url","href","indexOf","param","substring","Number","replace","PaginateButton","paginationStyle","firstNumber","secondNumber","newRange","itemsToReturn","forEach","item","index","push","action","i","key","className","join","propTypes","PropTypes","string","func","number","bool"],"sources":["/Users/grantwatson/Desktop/DevPlayground/ReactApps/gws/GWS_Portfolio_React/node_modules/react-sanity-pagination/src/helpers/index.js","/Users/grantwatson/Desktop/DevPlayground/ReactApps/gws/GWS_Portfolio_React/node_modules/react-sanity-pagination/src/paginatePrev.js","/Users/grantwatson/Desktop/DevPlayground/ReactApps/gws/GWS_Portfolio_React/node_modules/react-sanity-pagination/src/paginateNext.js","/Users/grantwatson/Desktop/DevPlayground/ReactApps/gws/GWS_Portfolio_React/node_modules/react-sanity-pagination/src/paginateFiveForward.js","/Users/grantwatson/Desktop/DevPlayground/ReactApps/gws/GWS_Portfolio_React/node_modules/react-sanity-pagination/src/paginateTenForward.js","/Users/grantwatson/Desktop/DevPlayground/ReactApps/gws/GWS_Portfolio_React/node_modules/react-sanity-pagination/src/paginateFiveBackward.js","/Users/grantwatson/Desktop/DevPlayground/ReactApps/gws/GWS_Portfolio_React/node_modules/react-sanity-pagination/src/paginateTenBackward.js","/Users/grantwatson/Desktop/DevPlayground/ReactApps/gws/GWS_Portfolio_React/node_modules/react-sanity-pagination/src/paginateEnd.js","/Users/grantwatson/Desktop/DevPlayground/ReactApps/gws/GWS_Portfolio_React/node_modules/react-sanity-pagination/src/paginateStart.js","/Users/grantwatson/Desktop/DevPlayground/ReactApps/gws/GWS_Portfolio_React/node_modules/react-sanity-pagination/src/pagination.js"],"sourcesContent":["export function addToUrl(page) {\n  var url = window.location.origin;\n  url = url + `?page=${page}`;\n  window.location.href = url;\n}\n\nexport function updateURL(page) {\n  if (window.history.pushState) {\n    var newurl =\n      window.location.protocol +\n      \"//\" +\n      window.location.host +\n      window.location.pathname +\n      `?page=${page}`;\n    window.history.pushState({ path: newurl }, \"\", newurl);\n  }\n}\n","import React from \"react\";\n\nconst PaginatePrev = props => {\n  return (\n    <React.Fragment>\n      {props.prevButton === true ? (\n        <li>\n          <button\n            className=\"paginateButton paginationPrev\"\n            disabled={props.currentPage === 1 ? \"disabled\" : \"\"}\n            onClick={() => props.changePage(props.currentPage - 1)}\n          >\n            {props.prevButtonLabel ? props.prevButtonLabel : \"<\"}\n          </button>\n        </li>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default PaginatePrev;\n","import React from \"react\";\n\nconst PaginateNext = props => {\n  return (\n    <React.Fragment>\n      {props.nextButton === true ? (\n        <li>\n          <button\n            className=\"paginateButton paginationNext\"\n            disabled={props.currentPage === props.pages ? \"disabled\" : \"\"}\n            onClick={() => props.changePage(props.currentPage + 1)}\n          >\n            {props.nextButtonLabel ? props.nextButtonLabel : \">\"}\n          </button>\n        </li>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default PaginateNext;\n","import React from \"react\";\n\nconst PaginateFiveForward = props => {\n  return (\n    <React.Fragment>\n      {props.jumpFiveForwardButton === true ? (\n        <li>\n          <button\n            className=\"paginateButton paginationFiveForwrard\"\n            disabled={props.currentPage > props.pages - 5 ? \"disabled\" : \"\"}\n            onClick={() =>\n              props.changePage(\n                props.currentPage === 1\n                  ? props.currentPage + 4\n                  : props.currentPage + 5\n              )\n            }\n          >\n            {props.jumpFiveForwardButtonLabel\n              ? props.jumpFiveForwardButtonLabel\n              : \">>\"}\n          </button>\n        </li>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default PaginateFiveForward;\n","import React from \"react\";\n\nconst PaginateTenForward = props => {\n  return (\n    <React.Fragment>\n      {props.jumpTenForwardButton === true ? (\n        <li>\n          <button\n            className=\"paginateButton paginationTenForward\"\n            disabled={props.currentPage > props.pages - 10 ? \"disabled\" : \"\"}\n            onClick={() =>\n              props.changePage(\n                props.currentPage === 1\n                  ? props.currentPage + 9\n                  : props.currentPage + 10\n              )\n            }\n          >\n            {props.jumpTenForwardButtonLabel\n              ? props.jumpTenForwardButtonLabel\n              : \">>>\"}\n          </button>\n        </li>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default PaginateTenForward;\n","import React from \"react\";\n\nconst PaginateFiveBackward = props => {\n  return (\n    <React.Fragment>\n      {props.jumpFiveBackwardButton === true ? (\n        <li>\n          <button\n            className=\"paginateButton paginationFiveBackward\"\n            disabled={props.currentPage < 5 ? \"disabled\" : \"\"}\n            onClick={() =>\n              props.changePage(\n                props.currentPage === 5\n                  ? props.currentPage - 4\n                  : props.currentPage - 5\n              )\n            }\n          >\n            {props.jumpFiveBackwardButtonLabel\n              ? props.jumpFiveBackwardButtonLabel\n              : \"<<\"}\n          </button>\n        </li>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default PaginateFiveBackward;\n","import React from \"react\";\n\nconst PaginateTenBackward = props => {\n  return (\n    <React.Fragment>\n      {props.jumpTenBackwardButton === true ? (\n        <li>\n          <button\n            className=\"paginateButton paginationTenBackward\"\n            disabled={props.currentPage < 10 ? \"disabled\" : \"\"}\n            onClick={() =>\n              props.changePage(\n                props.currentPage === 10\n                  ? props.currentPage - 9\n                  : props.currentPage - 10\n              )\n            }\n          >\n            {props.jumpTenBackwardButtonLabel\n              ? props.jumpTenBackwardButtonLabel\n              : \"<<<\"}\n          </button>\n        </li>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default PaginateTenBackward;\n","import React from \"react\";\n\nconst PaginateEnd = props => {\n  return (\n    <React.Fragment>\n      {props.jumpEndButton === true ? (\n        <li>\n          <button\n            className=\"paginateButton paginationEnd\"\n            disabled={props.currentPage === props.pages ? \"disabled\" : \"\"}\n            onClick={() => props.changePage(props.pages)}\n          >\n            {props.jumpEndButtonLabel ? props.jumpEndButtonLabel : \"End\"}\n          </button>\n        </li>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default PaginateEnd;\n","import React from \"react\";\n\nconst PaginateStart = props => {\n  return (\n    <React.Fragment>\n      {props.jumpStartButton === true ? (\n        <li>\n          <button\n            className=\"paginateButton paginationStart\"\n            disabled={props.currentPage === 1 ? \"disabled\" : \"\"}\n            onClick={() => props.changePage(1)}\n          >\n            {props.jumpStartButtonLabel ? props.jumpStartButtonLabel : \"Start\"}\n          </button>\n        </li>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default PaginateStart;\n","import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { updateURL } from \"./helpers/index\";\nimport PaginatePrev from \"./paginatePrev\";\nimport PaginateNext from \"./paginateNext\";\nimport PaginateFiveForward from \"./paginateFiveForward\";\nimport PaginateTenForward from \"./paginateTenForward\";\nimport PaginateFiveBackward from \"./paginateFiveBackward\";\nimport PaginateTenBackward from \"./paginateTenBackward\";\nimport PaginateEnd from \"./paginateEnd\";\nimport PaginateStart from \"./paginateStart\";\n\nfunction Pagination(props) {\n  // Called carbon copy because I never want this to change\n  const carbonCopy = props.items;\n  // Used to reRender component\n  const [render, setRender] = useState(\"\");\n\n  const [currentPage, setCurrentPage] = useState(1);\n  const postsPerPage = props.postsPerPage;\n  const [range, setRange] = useState(`0...${postsPerPage}`);\n  const buttons = [];\n  const postsLength = props.items.length;\n  const pages = Math.ceil(postsLength / postsPerPage);\n\n  // Set page if parameter is there\n  useEffect(() => {\n    if (carbonCopy.length === 0) {\n      setRender(`render_${Math.random()}`);\n    }\n    if (carbonCopy.length > 0) {\n      const url = window.location.href;\n      if (url.indexOf(\"?page=\") !== -1) {\n        const param = url.substring(url.indexOf(\"?page=\"));\n        const page = Number(param.replace(\"?page=\", \"\"));\n        // Update Content\n        changePage(page);\n      } else {\n        changePage(1);\n      }\n    }\n  }, [render]);\n\n  // Paginate Function to determine query range\n  const PaginateButton = props => {\n    const page = props.page;\n    if (props.paginationStyle === \"activePage\") {\n      return (\n        <React.Fragment>\n          <React.Fragment>\n            {page === currentPage ? (\n              <li>\n                <button\n                  className={page === currentPage ? \"active\" : \"\"}\n                  onClick={() => changePage(page, range)}\n                >\n                  {page}\n                </button>\n              </li>\n            ) : (\n              \"\"\n            )}\n          </React.Fragment>\n        </React.Fragment>\n      );\n    } else if (props.paginationStyle === \"centerMode\") {\n      return (\n        <React.Fragment>\n          {page === currentPage ||\n          page === currentPage - 1 ||\n          page === currentPage + 1 ? (\n            <li>\n              <button\n                className={page === currentPage ? \"active\" : \"\"}\n                onClick={() => changePage(page, range)}\n              >\n                {page}\n              </button>\n            </li>\n          ) : (\n            \"\"\n          )}\n        </React.Fragment>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <li>\n            <button\n              className={page === currentPage ? \"active\" : \"\"}\n              onClick={() => changePage(page, range)}\n            >\n              {page}\n            </button>\n          </li>\n        </React.Fragment>\n      );\n    }\n  };\n\n  const changePage = (page, range) => {\n    // Calculating Range\n    const firstNumber = postsPerPage * (page - 1);\n    const secondNumber = firstNumber + postsPerPage;\n    const newRange = `${firstNumber}...${secondNumber}`;\n    // Returning part of object that we need\n    let itemsToReturn = [];\n    carbonCopy.forEach((item, index) => {\n      if (index >= firstNumber && index <= secondNumber - 1) {\n        itemsToReturn.push(item);\n      }\n    });\n    setCurrentPage(page);\n    setRange(newRange);\n    if (page !== currentPage) {\n      updateURL(page);\n      // console.log(page, newRange, itemsToReturn);\n      props.action(page, newRange, itemsToReturn);\n    } else {\n      // console.log(page, newRange, itemsToReturn);\n      props.action(1, newRange, itemsToReturn);\n      // Returning nothing because already on page 🕵️‍!\n    }\n  };\n\n  // Assign Buttons\n  for (let i = 0; i < pages; i++) {\n    buttons.push(\n      <React.Fragment key={i + 1}>\n        <PaginateButton\n          page={i + 1}\n          action={props.action}\n          paginationStyle={props.paginationStyle}\n        />\n      </React.Fragment>\n    );\n  }\n  // Return Pagination\n  return (\n    <React.Fragment>\n      {postsLength > 1 ? (\n        <ul className={['pagePagination', props.className].join(' ')}>\n          <PaginateStart\n            jumpStartButton={props.jumpStartButton}\n            jumpStartButtonLabel={props.jumpStartButtonLabel}\n            currentPage={currentPage}\n            changePage={changePage}\n            pages={pages}\n          />\n          <PaginateTenBackward\n            jumpTenBackwardButton={props.jumpTenBackwardButton}\n            jumpTenBackwardButtonLabel={props.jumpTenBackwardButtonLabel}\n            currentPage={currentPage}\n            changePage={changePage}\n            pages={pages}\n          />\n          <PaginateFiveBackward\n            jumpFiveBackwardButton={props.jumpFiveBackwardButton}\n            jumpFiveBackwardButtonLabel={props.jumpFiveBackwardButtonLabel}\n            currentPage={currentPage}\n            changePage={changePage}\n            pages={pages}\n          />\n          <PaginatePrev\n            prevButton={props.prevButton}\n            currentPage={currentPage}\n            changePage={changePage}\n            prevButtonLabel={props.prevButtonLabel}\n          />\n          {buttons}\n          <PaginateNext\n            nextButton={props.nextButton}\n            currentPage={currentPage}\n            changePage={changePage}\n            pages={pages}\n            nextButtonLabel={props.nextButtonLabel}\n          />\n          <PaginateFiveForward\n            jumpFiveForwardButton={props.jumpFiveForwardButton}\n            jumpFiveForwardButtonLabel={props.jumpFiveForwardButtonLabel}\n            currentPage={currentPage}\n            changePage={changePage}\n            pages={pages}\n          />\n          <PaginateTenForward\n            jumpTenForwardButton={props.jumpTenForwardButton}\n            jumpTenForwardButtonLabel={props.jumpTenForwardButtonLabel}\n            currentPage={currentPage}\n            changePage={changePage}\n            pages={pages}\n          />\n          <PaginateEnd\n            jumpEndButton={props.jumpEndButton}\n            jumpEndButtonLabel={props.jumpEndButtonLabel}\n            currentPage={currentPage}\n            changePage={changePage}\n            pages={pages}\n          />\n        </ul>\n      ) : (\n        \"\"\n      )}\n    </React.Fragment>\n  );\n}\n\nPagination.propTypes = {\n  paginationStyle: PropTypes.string,\n  action: PropTypes.func,\n  postsPerPage: PropTypes.number,\n  postsLength: PropTypes.number,\n  nextButton: PropTypes.bool,\n  nextButtonLabel: PropTypes.string,\n  prevButton: PropTypes.bool,\n  prevButtonLabel: PropTypes.string,\n  jumpStartButton: PropTypes.bool,\n  jumpStartButtonLabel: PropTypes.string,\n  jumpFiveForwardButton: PropTypes.bool,\n  jumpFiveForwardButtonLabel: PropTypes.string,\n  jumpTenForwardButton: PropTypes.bool,\n  jumpTenForwardButtonLabel: PropTypes.string,\n  jumpFiveBackwardButton: PropTypes.bool,\n  jumpFiveBackwardButtonLabel: PropTypes.string,\n  jumpTenBackwardButton: PropTypes.bool,\n  jumpTenBackwardButtonLabel: PropTypes.string,\n  jumpEndButton: PropTypes.bool,\n  jumpEndButtonLabel: PropTypes.string,\n  className: PropTypes.string,\n};\n\nexport default Pagination;\n"]},"metadata":{},"sourceType":"module"}